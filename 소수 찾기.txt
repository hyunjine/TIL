def permutations(arr, visit, length, num, depth, aim):
    result = []
    if depth == aim:
        return [int(num)]
    else:
        for i in range(length):
            if not visit[i]:
                visit[i] = True
                result += permutations(arr, visit, length, num+arr[i], depth+1, aim)
                visit[i] = False
    return result

def solution(numbers):
    str_number = ''.join(sorted(numbers, reverse=True))
    length = len(str_number)
    visit = [False]*length
    perms = []
    for i in range(1, length+1):
        perms += permutations(str_number, visit, length, "", 0, i)
    perms = set(perms)
    
    number = int(str_number) + 1
    answer = 0
    decimal = [0]*number
    for n in range(2, number):
        for m in range(n+n, number, n):
            if decimal[m] == 0:
                decimal[m] = 1
        if decimal[n] == 0 and n in perms:
            answer += 1
            
            
    return answer

