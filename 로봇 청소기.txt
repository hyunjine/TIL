def solution(N,M,graph,X,Y,_D):
  R,C,D = X,Y,_D
  dir = [[(0,-1), (1,0), 3], [(-1,0), (0,-1), 0], [(0,1), (-1,0), 1], [(1,0), (0,1), 2]]
  answer = 0
  while True:
    # 현재 칸이 비어있으면 청소
    if graph[R][C] == 0:
      answer += 1
      graph[R][C] = 2
    canClean = False
    for r,c in [(R-1,C),(R+1,C),(R,C-1),(R,C+1)]:
      if 0<=r<N and 0<=c<M and graph[r][c] == 0:
        canClean = True
        break
    # 주변에 빈칸이 있는 경우
    if canClean:
      # 반시계 회전 4번
      for _ in range(4):
        change,_,p = dir[D]
        dr,dc = R+change[0],C+change[1]
        D = p
        if 0<=dr<N and 0<=dc<M and graph[dr][dc] == 0:
          R,C = dr,dc
          break    
    # 주변에 빈칸이 없는 경우
    else:
      _,rear,_ = dir[D]
      dr,dc = R+rear[0],C+rear[1]
      if 0<=dr<N and 0<=dc<M and graph[dr][dc] != 1:
        R,C = dr,dc
      else:
        return answer
N,M = map(int, input().split())
R,C,D = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(N)]

answer = solution(N,M,graph,R,C,D)
  
print(answer)