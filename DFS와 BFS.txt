N, M, V = map(int, input().split())
case = [list(map(int, input().split())) for _ in range(M)]
graph = [[] for _ in range((N+1))]
for m in range(M): 
  graph[case[m][0]].append(case[m][1])
  graph[case[m][0]].sort()
  graph[case[m][1]].append(case[m][0])
  graph[case[m][1]].sort()
answer = ''
visited = [False]*(N+1)
def dfs(graph, v, visited):
  global answer
  answer += "%d "%v
  visited[v] = True
  for g in graph[v]:
    if not visited[g]: dfs(graph, g, visited)

dfs(graph, V, visited)
print(answer.rstrip())

from collections import deque
visited = [False]*(N+1)
answer = ''
queue = deque()
queue.append(V)
while queue:
  v = queue.popleft()
  visited[v] = True
  answer += "%d "%v
  for g in graph[v]:
    if not visited[g]:
      visited[g] = True
      queue.append(g)
print(answer.rstrip())