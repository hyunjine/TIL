import sys
sys.getrecursionlimit()
def find_parent(graph, n):
  result = 0
  if n == graph[n]:
    result = n
  else:
    result = find_parent(graph, graph[n])
    graph[n] = result
  return result

def union(graph, x, y):
  a = find_parent(graph, x)
  b = find_parent(graph, y)
  if b < a:
    graph[a] = b
  else:
    graph[b] = a
    
def solution(g, p, arr):
  answer = 0
  graph = [i for i in range(g+1)]
  for a in arr:
    x = find_parent(graph, a)
    if x == 0: break
    answer += 1
    union(graph, x, x-1)
  return answer

read = sys.stdin.readline
g = int(read())
p = int(read())
planes = [int(read()) for _ in range(p)]
answer = solution(g, p, planes)
print(answer)